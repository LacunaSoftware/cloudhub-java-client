/*
 * Cloudhub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudhub.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import cloudhub.client.JSON;

/**
 * SignHashRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-16T16:45:14.977060100-03:00[America/Sao_Paulo]")
public class SignHashRequest {
  public static final String SERIALIZED_NAME_SESSION = "session";
  @SerializedName(SERIALIZED_NAME_SESSION)
  private String session;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private byte[] hash;

  public static final String SERIALIZED_NAME_DIGEST_ALGORITHM = "digestAlgorithm";
  @SerializedName(SERIALIZED_NAME_DIGEST_ALGORITHM)
  private String digestAlgorithm;

  public static final String SERIALIZED_NAME_DIGEST_ALGORITHM_OID = "digestAlgorithmOid";
  @SerializedName(SERIALIZED_NAME_DIGEST_ALGORITHM_OID)
  private String digestAlgorithmOid;

  public static final String SERIALIZED_NAME_CERTIFICATE_ALIAS = "certificateAlias";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_ALIAS)
  private String certificateAlias;

  public SignHashRequest() {
  }

  public SignHashRequest session(String session) {
    
    this.session = session;
    return this;
  }

   /**
   * Get session
   * @return session
  **/
  @javax.annotation.Nonnull

  public String getSession() {
    return session;
  }


  public void setSession(String session) {
    this.session = session;
  }


  public SignHashRequest hash(byte[] hash) {
    
    this.hash = hash;
    return this;
  }

   /**
   * Get hash
   * @return hash
  **/
  @javax.annotation.Nonnull

  public byte[] getHash() {
    return hash;
  }


  public void setHash(byte[] hash) {
    this.hash = hash;
  }


  public SignHashRequest digestAlgorithm(String digestAlgorithm) {
    
    this.digestAlgorithm = digestAlgorithm;
    return this;
  }

   /**
   * Get digestAlgorithm
   * @return digestAlgorithm
  **/
  @javax.annotation.Nullable

  public String getDigestAlgorithm() {
    return digestAlgorithm;
  }


  public void setDigestAlgorithm(String digestAlgorithm) {
    this.digestAlgorithm = digestAlgorithm;
  }


  public SignHashRequest digestAlgorithmOid(String digestAlgorithmOid) {
    
    this.digestAlgorithmOid = digestAlgorithmOid;
    return this;
  }

   /**
   * Get digestAlgorithmOid
   * @return digestAlgorithmOid
  **/
  @javax.annotation.Nullable

  public String getDigestAlgorithmOid() {
    return digestAlgorithmOid;
  }


  public void setDigestAlgorithmOid(String digestAlgorithmOid) {
    this.digestAlgorithmOid = digestAlgorithmOid;
  }


  public SignHashRequest certificateAlias(String certificateAlias) {
    
    this.certificateAlias = certificateAlias;
    return this;
  }

   /**
   * Get certificateAlias
   * @return certificateAlias
  **/
  @javax.annotation.Nullable

  public String getCertificateAlias() {
    return certificateAlias;
  }


  public void setCertificateAlias(String certificateAlias) {
    this.certificateAlias = certificateAlias;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignHashRequest signHashRequest = (SignHashRequest) o;
    return Objects.equals(this.session, signHashRequest.session) &&
        Arrays.equals(this.hash, signHashRequest.hash) &&
        Objects.equals(this.digestAlgorithm, signHashRequest.digestAlgorithm) &&
        Objects.equals(this.digestAlgorithmOid, signHashRequest.digestAlgorithmOid) &&
        Objects.equals(this.certificateAlias, signHashRequest.certificateAlias);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(session, Arrays.hashCode(hash), digestAlgorithm, digestAlgorithmOid, certificateAlias);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignHashRequest {\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    digestAlgorithm: ").append(toIndentedString(digestAlgorithm)).append("\n");
    sb.append("    digestAlgorithmOid: ").append(toIndentedString(digestAlgorithmOid)).append("\n");
    sb.append("    certificateAlias: ").append(toIndentedString(certificateAlias)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("session");
    openapiFields.add("hash");
    openapiFields.add("digestAlgorithm");
    openapiFields.add("digestAlgorithmOid");
    openapiFields.add("certificateAlias");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("session");
    openapiRequiredFields.add("hash");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SignHashRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SignHashRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SignHashRequest is not found in the empty JSON string", SignHashRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SignHashRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SignHashRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SignHashRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("session").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session").toString()));
      }
      if ((jsonObj.get("digestAlgorithm") != null && !jsonObj.get("digestAlgorithm").isJsonNull()) && !jsonObj.get("digestAlgorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digestAlgorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digestAlgorithm").toString()));
      }
      if ((jsonObj.get("digestAlgorithmOid") != null && !jsonObj.get("digestAlgorithmOid").isJsonNull()) && !jsonObj.get("digestAlgorithmOid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digestAlgorithmOid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digestAlgorithmOid").toString()));
      }
      if ((jsonObj.get("certificateAlias") != null && !jsonObj.get("certificateAlias").isJsonNull()) && !jsonObj.get("certificateAlias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateAlias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificateAlias").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SignHashRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SignHashRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SignHashRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SignHashRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SignHashRequest>() {
           @Override
           public void write(JsonWriter out, SignHashRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SignHashRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SignHashRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SignHashRequest
  * @throws IOException if the JSON string is invalid with respect to SignHashRequest
  */
  public static SignHashRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SignHashRequest.class);
  }

 /**
  * Convert an instance of SignHashRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

