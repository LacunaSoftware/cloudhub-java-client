/*
 * Cloudhub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudhub;

import cloudhub.client.ApiCallback;
import cloudhub.client.CloudhubClient;
import cloudhub.client.ApiException;
import cloudhub.client.ApiResponse;
import cloudhub.client.Pair;
import com.google.gson.reflect.TypeToken;

import cloudhub.client.model.SessionCreateRequest;
import cloudhub.client.model.SessionModel;
import cloudhub.client.model.SignHashRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SessionsApi {
    private CloudhubClient localVarCloudhubClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SessionsApi(CloudhubClient CloudhubClient) {
        this.localVarCloudhubClient = CloudhubClient;
        this.localCustomBaseUrl = this.localVarCloudhubClient.getBasePath();
    }

    public CloudhubClient getCloudhubClient() {
        return localVarCloudhubClient;
    }

    public void setCloudhubClient(CloudhubClient CloudhubClient) {
        this.localVarCloudhubClient = CloudhubClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiSessionsCertificateGet
     * @param session  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSessionsCertificateGetCall(String session, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/sessions/certificate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (session != null) {
            localVarQueryParams.addAll(localVarCloudhubClient.parameterToPair("session", session));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarCloudhubClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarCloudhubClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarCloudhubClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiSessionsCertificateGetValidateBeforeCall(String session, final ApiCallback _callback) throws ApiException {
        return apiSessionsCertificateGetCall(session, _callback);

    }

    /**
     * 
     * 
     * @param session  (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public byte[] apiSessionsCertificateGet(String session) throws ApiException {
        ApiResponse<byte[]> localVarResp = apiSessionsCertificateGetWithHttpInfo(session);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param session  (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<byte[]> apiSessionsCertificateGetWithHttpInfo(String session) throws ApiException {
        okhttp3.Call localVarCall = apiSessionsCertificateGetValidateBeforeCall(session, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarCloudhubClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param session  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSessionsCertificateGetAsync(String session, final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiSessionsCertificateGetValidateBeforeCall(session, _callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarCloudhubClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiSessionsPost
     * @param sessionCreateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSessionsPostCall(SessionCreateRequest sessionCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sessionCreateRequest;

        // create path and map variables
        String localVarPath = "/api/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarCloudhubClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarCloudhubClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarCloudhubClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiSessionsPostValidateBeforeCall(SessionCreateRequest sessionCreateRequest, final ApiCallback _callback) throws ApiException {
        return apiSessionsPostCall(sessionCreateRequest, _callback);

    }

    /**
     * 
     * 
     * @param sessionCreateRequest  (optional)
     * @return SessionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SessionModel apiSessionsPost(SessionCreateRequest sessionCreateRequest) throws ApiException {
        ApiResponse<SessionModel> localVarResp = apiSessionsPostWithHttpInfo(sessionCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sessionCreateRequest  (optional)
     * @return ApiResponse&lt;SessionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SessionModel> apiSessionsPostWithHttpInfo(SessionCreateRequest sessionCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = apiSessionsPostValidateBeforeCall(sessionCreateRequest, null);
        Type localVarReturnType = new TypeToken<SessionModel>(){}.getType();
        return localVarCloudhubClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sessionCreateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSessionsPostAsync(SessionCreateRequest sessionCreateRequest, final ApiCallback<SessionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiSessionsPostValidateBeforeCall(sessionCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<SessionModel>(){}.getType();
        localVarCloudhubClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiSessionsSignHashPost
     * @param signHashRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSessionsSignHashPostCall(SignHashRequest signHashRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signHashRequest;

        // create path and map variables
        String localVarPath = "/api/sessions/sign-hash";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarCloudhubClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarCloudhubClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarCloudhubClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiSessionsSignHashPostValidateBeforeCall(SignHashRequest signHashRequest, final ApiCallback _callback) throws ApiException {
        return apiSessionsSignHashPostCall(signHashRequest, _callback);

    }

    /**
     * 
     * 
     * @param signHashRequest  (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public byte[] apiSessionsSignHashPost(SignHashRequest signHashRequest) throws ApiException {
        ApiResponse<byte[]> localVarResp = apiSessionsSignHashPostWithHttpInfo(signHashRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param signHashRequest  (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<byte[]> apiSessionsSignHashPostWithHttpInfo(SignHashRequest signHashRequest) throws ApiException {
        okhttp3.Call localVarCall = apiSessionsSignHashPostValidateBeforeCall(signHashRequest, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarCloudhubClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param signHashRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSessionsSignHashPostAsync(SignHashRequest signHashRequest, final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiSessionsSignHashPostValidateBeforeCall(signHashRequest, _callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarCloudhubClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Converts a given byte array certificate into a readable string for signature or validation purposes
     * @param certificate The certificate obtained from apiCertificateGet
     * @return a String with the certificate in base 64
     */
    public static String convertCertificateToString(byte[] certificate) {
        return new String(certificate).replace("\"", "");
    }

    /**
     * Converts a given byte array toSignHash into a base64 encoded byte array for signature purposes
     * @param toSignHash the hash used to sign the document
     * @return base64 encoded byte array
     */
    public static byte[] convertToSignHashToByteArray64(byte[] toSignHash){
        // first we need to convert it to string and then decode as base64
        return Base64.getDecoder().decode(convertCertificateToString(toSignHash));
    }
}
